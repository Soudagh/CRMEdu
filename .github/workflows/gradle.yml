# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: ${{ secrets.DATABASE_NAME}}
          POSTGRES_USER:  ${{ secrets.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        ports:
          - 5435:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to start..."
          until pg_isready -h localhost -p 5435 -U postgres; do
            sleep 2
          done
          echo "PostgreSQL is ready!"

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
      # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
      #
      # - name: Setup Gradle
      #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      #   with:
      #     gradle-version: '8.9'
      #
      # - name: Build with Gradle 8.9
      #   run: gradle build

      - name: Run Tests
        run: ./gradlew test

      - name: Generate Code Coverage Report
        run: ./gradlew jacocoTestReport

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./build/reports/jacoco/test/jacocoTestReport.xml

      - name: Generate Javadoc
        run: ./gradlew javadoc

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: build/libs

  publish-docs:
    runs-on: ubuntu-latest
    env:
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Generate Javadoc
        run: ./gradlew javadoc

      - name: Move Javadoc to gh-pages folder
        run: mkdir -p gh-pages/javadoc && mv build/docs/javadoc/* gh-pages/javadoc/

      - name: Start application for OpenAPI generation
        run: ./gradlew bootRun & sleep 10

      - name: Generate OpenAPI spec
        run: ./gradlew generateOpenApiSpec

      - name: Fetch OpenAPI spec
        run: curl -o build/generated/openapi.json http://localhost:8080/v3/api-docs

      - name: Fix OpenAPI version for Swagger UI
        run: |
          cat build/generated/openapi.json | jq '{openapi: "3.0.1", info: .info, servers: .servers, paths: .paths, components: .components}' > temp.json
          mv temp.json build/generated/openapi.json

      - name: Convert OpenAPI spec
        uses: Legion2/swagger-ui-action@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          output: gh-pages/swagger
          spec-file: build/generated/openapi.json

      - name: Create index.html for GitHub Pages
        run: echo '<!DOCTYPE html><html><head><meta http-equiv="refresh" content="0; url=swagger/index.html"></head><body></body></html>' > gh-pages/index.html

      - name: Publish Javadoc & Swagger to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
