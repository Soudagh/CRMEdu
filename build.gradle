plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'org.springdoc.openapi-gradle-plugin' version '1.6.0'
    id 'com.adarshr.test-logger' version '4.0.0'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    implementation 'net.lbruun.springboot:preliquibase-spring-boot-starter:1.6.0'
    implementation 'org.mapstruct:mapstruct:1.6.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.0'
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.instancio:instancio-junit:2.9.0'
    testImplementation 'org.testcontainers:postgresql'
    implementation 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    reports {
        junitXml.required = true
        html.required = true
    }
}

testlogger {
    theme 'mocha'
    showPassed = true
    showSkipped = true
    showFailed = true
}

tasks.register("generateOpenApiSpec") {
    doLast {
        def outputDir = layout.buildDirectory.dir("generated/openapi").get().asFile
        outputDir.mkdirs()
        ant.get(src: "http://localhost:8080/v3/api-docs", dest: new File(outputDir, "openapi.json"))
    }
}

tasks.named('jacocoTestReport') {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }

    def exclusions = [
            '**/infrastructure/entity/*.class',
    ]

    def filteredClassDirs = classDirectories.files.collect {
        println "Checking class directory: ${it}"
        fileTree(dir: it, exclude: exclusions)
    }

    classDirectories.setFrom(files(filteredClassDirs))
}